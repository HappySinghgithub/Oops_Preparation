Ques-1  OOPs
* Object-Oriented Programming is a methodology to design a program using classes and objects.
* The main aim of object-oriented programming is to implement real-world entities, for example,
  object, classes, abstraction, inheritance, polymorphism, etc.
* The main purpose of OOP is to bind together the data and the functions that operate on them so that no other part of the code can access this data except that 
  function

Ques-2	Procedural Programming vs Object-Oriented Programming
	    Procedural Programming			     Object-Oriented Programming
     *  In procedural programming, the program	      * In object-oriented programming, the 
	is divided into small parts called 		program is divided into small parts
	functions.					called objects.
     *  Procedural programming follows a	      * Object-oriented programming follows a 
	top-down approach				bottom-up approach.
     *  There is no access specifier in procedural    * Object-oriented programming has access 
	programming.					specifiers like private, public,
							protected, etc.
     *  Procedural programming does not have any      * Object-oriented programming provides 
	proper way of hiding data so it is less 	data hiding so it is more secure
	secure.
     *	In procedural programming, overloading is     * Overloading is possible in object-
	not possible.					oriented programming.
     *  Procedural programming is based on the 	      * Object-oriented programming is based on 
	unreal world.					the real world.
     *  Examples: C, FORTRAN, Pascal, Basic, etc.     * Examples: C++, Java, Python, C#, etc.
     *  It does not have a scope for code reuse.      * It provides more scope for code reuse.

Ques-3       Advantages of OOP:
     *  Re-usability: Write once and use it multiple times, we can achieve this by using class.
     *  Redundancy: Inheritance is the good feature for data redundancy. If we need a same functionality in multiple class, we can write a common class for the same 
        functionality and inherit that class to subclass.
     *	Easy Maintenance: It is easy to maintain and modify existing code, as new objects can be created with small differences to existing ones.
     *	Security: Using data hiding and abstraction only necessary data will be provided, thus maintains the security of data.

	     Disadvantages of OOP:
	Size: Object-Oriented Programs are much larger than other programs.
	Effort: Object-Oriented Programs require a lot of work to create.
	Speed: Object-Oriented Programs are slower than other programs, because of their size.

Ques-4     Structured Programming
     *  Structured Programming is a type of programming that generally converts large or complex programs into small pieces of code.
     *  These small pieces of codes are usually known as functions or modules or sub-programs of large complex programs.
     *	It is more user-friendly and easy to understand as compared to unstructured programming.
     *  Structured programs do not allow code duplication. 	
     * 	Structured programs use a greater number of data types as compared to unstructured programs.	
     *  It does not use GOTO to control the flow of execution. Instead, it uses loops. 	

	   Unstructured Programming
     *	Unstructured Programming is a type of programming that generally executes in sequential order i.e., these programs just not jumped from any line of code and 
        each line gets executed sequentially.
     *	It is also known as non-structured programming that is capable of creating turning-complete algorithms.
     *	It is less user-friendly and little hard to understand as compared to structured programming.
     * 	These programs allow code duplication.
     *  Unstructured programs use a limited number of data types as compared to structured programs.	
     *  It uses GOTO to control the flow of execution.

Ques-5 	   CLASS
     *	Collection of objects is called class. It is a logical entity. It can't be physical	
     *	It is also a blueprint from which you can create an individual object. 
     *	Class doesn't consume any space.
     
     A class in Java can contain:
	       - Fields
	       - Methods
	       - Constructors
	       - Blocks
	       - Nested class and interface
	       
Ques-6 Instance variable in Java
	A variable which is created inside the class but outside the method is known as an instance variable. Instance variable doesn't get memory at compile time. It 
	gets memory at runtime when an object or instance is created. That is why it is known as an instance variable.
Ques-7 Method
	method is like a function which is used to expose the behavior of an object.
	A method is a block of code which only runs when it is called.
	You can pass data, known as parameters, into a method.
	     - Create a Method
		A method must be declared within a class. It is defined with the name of the method, followed by parentheses (). Java provides some pre-defined 
		methods, such as System.out.println(), but you can also create your own methods to perform certain actions:
	     - Call a Method
	        To call a method in Java, write the method's name followed by two parentheses () and a semicolon;
		
	  
	  OBJECT
     *  An object is a real-world entity.
     *	An object is a runtime entity.
     * 	Any entity that has state and behavior is known as an object.
     * 	An object contains an address and takes up some space in memory. 
     *	For example, a chair, pen, table, keyboard, bike, etc. 
     *	It can be physical or logical.
	Example: Pen is an object. Its name is Reynolds; color is white, known as its state. It is used to write, so writing is its behavior.
	
	3 Ways to initialize object
	There are 3 ways to initialize object in Java.
	  - By reference variable
	  - By method
	  - By constructor
	
	There are many ways to create an object in java:-
     1.	Java newInstance() method
	The newInstance() method of Class class is used to create a new instance of the class dynamically. The newInstance() method of Class class can invoke only no 
	arg constructor of the class. This newInstance () method of the class does not consider any parameters or arguments from the class, which means that it doesn’t 
	possess any constructor; thus, it can be called the no-arg constructor for one class.
     2. Clone method()
     	The clone method() is a way to create exact copy of an object.
	Java provides an assignment operator to copy the values but no operator to copy the object. Object class has a clone method which can be used to copy the 
	values of an object without any side-effect. Assignment operator has a side-effect that when a reference is assigned to another reference then a new object is 
	not created and both the reference point to the same object. This means if we change the value in one object then same will reflect in another object as well. 
	clone() method handles this problem.
     3. Factory method()
     	Factory method is a creational design pattern which solves the problem of creating product objects without specifying their concrete classes. The Factory 
	Method defines a method, which should be used for creating objects instead of using a direct constructor call
	
	Class vs Object
			Class								Object
     *  A class is a blueprint for declaring and creating object     *  An object is a class instance that allows programmers to use variables and 
                                              				methods from inside the class
     *  Memory is not allocated to classes. 	     		     *  When objects are created, memory is 		
     	Classes have no physical existence.				allocated to them in the heap memory. 		
     *  We can declare a class only once.	   		     *	A class can be used to create many objects. 					
     *  Class is a logical entity		    		     *  An object is a physical entity
     *  Class is created using the class keyword    		     *  Objects are created through new keyword like Dog d = new Dog();. 			
      	class Dog{}					       		We can also like create an object using the newInstance() method, clone() method, fatory method 
									and using deserialization. 	
     *  Example: Mobile is a class.		    		     *  If Mobile is the class then iphone, redmi, blackberry, samsung are its objects which have 
     									different properties and behaviours.		

Ques-8	Constructor
     *  constructor is used to initialize an object(not to create an object)
     *  constructor is a block of code (similar to method) having same name as that of class name.
     *	constructor does not have any return type, not even 'void'.
     * 	only 4 modifier are applicable for costructor i.e. public, private, protected, default. (static, final, synchronized etc cannot be used in constructor).
     *	constructor execute automatically when we create an object.
     Types of Constructor:-
     1. Default Constructor
     A constructor is called "Default Constructor" when it doesn't have any parameter.
     If we don’t create a constructor in a class, then the compiler creates a default constructor(with no arguments) for the class. And if we write a constructor with 
     arguments or no arguments then the compiler does not create a default constructor. 
     2. Parameterized constructor
     A constructor that has parameters is known as parameterized constructor. we pass the value of the parameter in the object of the class in parameterized 
     constructor.
     
Ques-9 Static method
	The static keyword is mainly used for memory management. We can apply static keyword with variables, methods, blocks and nested classes. The static 
	keyword belongs to the class than an instance of the class.
	The static can be:
	- Variable (also known as a class variable)
	- Method (also known as a class method)
	- Block
	- Nested class
	1. static variable
	   If we declare any variable as static, it is known as a static variable. The static variable can be used to refer to the common property of all objects 
	   for example, the company name of employees, college name of students, etc. The static variable gets memory only once in the class area at the time of class 
	   loading.
	   It makes your program memory efficient (i.e., it saves memory)
	2. static block
	   Is used to initialize the static data member.
	   It is executed before the main method at the time of classloading.
	3. static method
	   If we apply static keyword with any method, it is known as static method.
	   A static method belongs to the class rather than the object of a class.
	   A static method can be invoked without the need for creating an instance of a class.
	   A static method can access static data member and can change the value of it.
	   
Ques-10	This keyword
	this is a reference variable that refers to the current object.
	1) this: to refer current class instance variable
	The this keyword can be used to refer current class instance variable. If there is ambiguity between the instance variables and parameters, this keyword 
	resolves the problem of ambiguity.
	2) this: to invoke current class method
	You may invoke the method of the current class by using the this keyword. If you don't use the this keyword, compiler automatically adds this keyword while 
	invoking the method. 
	3) this() : to invoke current class constructor
	The this() constructor call can be used to invoke the current class constructor. It is used to reuse the constructor. 
	4) this: to pass as an argument in the method
	The this keyword can also be passed as an argument in the method. It is mainly used in the event handling.
	5) this: to pass as argument in the constructor call
	We can pass the this keyword in the constructor also. It is useful if we have to use one object in multiple classes.
	
Ques-11	Inheritance
	Inheritance in Java is a mechanism in which one object acquires all the properties and behaviors of a parent object
	Inheritance represents the IS-A relationship which is also known as a parent-child relationship.
	Why use inheritance in java
	  * For Method Overriding
	    (so runtime polymorphism
	    can be achieved).
	  * For Code Reusability.
	The extends keyword indicates that you are making a new class that derives from an existing class. 
	1. Single Inheritance 
	When a class inherits another class, it is known as a single inheritance
	2. Multilevel Inheritance
	When there is a chain of inheritance, it is known as multilevel inheritance.
	3. Hierarchical Inheritance
	When two or more classes inherits a single class, it is known as hierarchical inheritance.
	
	Q) Why multiple inheritance is not supported in java?
	To reduce the complexity and simplify the language, multiple inheritance is not supported in java.
	Consider a scenario where A, B, and C are three classes. The C class inherits A and B classes. If A and B classes have the same method and you call it from 
	child class object, there will be ambiguity to call the method of A or B class.
	Since compile-time errors are better than runtime errors, Java renders compile-time error if you inherit 2 classes. So whether you have same method or 
	different, there will be compile time error.
	
Ques-12	Associatioin
	Two or more than class are not tightly couple in the case of Association
	Association is a relation between two separate classes which establishes through their Objects. Association can be one-to-one, one-to-many, many-to-one, many-
	to-many.
	Aggregation
	If more than one class have a weak bonding, known as Aggregation
	Eg:- Car,Music (Car can easily run without music and music can also play without car)
	It represents Has-A’s relationship.
	It is a unidirectional association i.e. a one-way relationship. For example, a department can have students but vice versa is not possible and thus 
	unidirectional in nature.
	In Aggregation, both the entries can survive individually which means ending one entity will not affect the other entity.
	It represents a Has-A relationship. In the above example: Student Has-A name. Student Has-A ID. Student Has-A Dept. Department Has-A Students
	Composition
	If more than one class have a strong bonding, known as Composition
	Eg:- Car, Engine (Car is useless without engine and engine is useless without car)
	Composition is a restricted form of Aggregation in which two entities are highly dependent on each other.  

It represents part-of relationship.
In composition, both entities are dependent on each other.

Ques-13 Polymorphism
	Polymorphism is the ability of an object to take on many forms. The most common use of polymorphism in OOP occurs when a parent class reference is used to 
	refer to a child class object.
	There are two types of polymorphism:-
	1. Static polymorphism/compile time polymorphism/early binding
	Static polymorphism is a type of polymorphism that collects the information to call a method during compile time
	It is achieved by function overloading or operator overloading. 
	     (a). Method overloading:- If a class is having more than one function with same name having different parameter is called function overloading.
	     		* Method name same
			* class name same
			* Different argument
			   - Number of argument
			   - Sequence of argument
			   - Types of argument
	     (b). Operator overloading:- If we have use "+" operator for multiple work, known as Operator overloading
		* Java doesn't support operator overloading explicitly
		* only "+" operator can be used for operator overloading
		* "+" can be used for addition and it is also used for to concatenation
	2. Dynamic polymorphism/run time

Note: But Java doesn’t support the Operator Overloading.
	* Dynamic polymorphism/runtime polymorphism/late binding
	
Ques-8      Encapsulation
	Encapsulation is a process of wrapping code and data together into a single unit, for example, a capsule which is mixed of several medicines.
	The variables of a class will be hidden from other classes, and can be accessed only through the methods of their current class.
	We can create a encapsulated class in Java by making all the data members of the class private.
	To achieve encapsulation in Java −
	Declare the variables of a class as private.
	provide public setter and getter methods to access and update the value of a private variable
	The main AIM of encapsulation is to hide the internal implementation of the class from the outside class.
